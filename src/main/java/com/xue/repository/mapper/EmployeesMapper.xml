<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xue.repository.dao.EmployeesMapper">
  <resultMap id="BaseResultMap" type="com.xue.entity.model.Employees">
    <id column="emp_no" jdbcType="INTEGER" property="empNo" />
    <result column="birth_date" jdbcType="DATE" property="birthDate" />
    <result column="first_name" jdbcType="VARCHAR" property="firstName" />
    <result column="last_name" jdbcType="VARCHAR" property="lastName" />
    <result column="gender" jdbcType="CHAR" property="gender" />
    <result column="hire_date" jdbcType="DATE" property="hireDate" />
    <result column="time_stamp" jdbcType="TIMESTAMP" property="timeStamp" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    emp_no, birth_date, first_name, last_name, gender, hire_date, time_stamp
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employees
    where emp_no = #{empNo,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employees
    where emp_no = #{empNo,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xue.entity.model.Employees">
    insert into employees (emp_no, birth_date, first_name, 
      last_name, gender, hire_date, 
      time_stamp)
    values (#{empNo,jdbcType=INTEGER}, #{birthDate,jdbcType=DATE}, #{firstName,jdbcType=VARCHAR}, 
      #{lastName,jdbcType=VARCHAR}, #{gender,jdbcType=CHAR}, #{hireDate,jdbcType=DATE}, 
      #{timeStamp,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xue.entity.model.Employees">
    insert into employees
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="empNo != null">
        emp_no,
      </if>
      <if test="birthDate != null">
        birth_date,
      </if>
      <if test="firstName != null">
        first_name,
      </if>
      <if test="lastName != null">
        last_name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="hireDate != null">
        hire_date,
      </if>
      <if test="timeStamp != null">
        time_stamp,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="empNo != null">
        #{empNo,jdbcType=INTEGER},
      </if>
      <if test="birthDate != null">
        #{birthDate,jdbcType=DATE},
      </if>
      <if test="firstName != null">
        #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=CHAR},
      </if>
      <if test="hireDate != null">
        #{hireDate,jdbcType=DATE},
      </if>
      <if test="timeStamp != null">
        #{timeStamp,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xue.entity.model.EmployeesExample" resultType="java.lang.Long">
    select count(*) from employees
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employees
    <set>
      <if test="record.empNo != null">
        emp_no = #{record.empNo,jdbcType=INTEGER},
      </if>
      <if test="record.birthDate != null">
        birth_date = #{record.birthDate,jdbcType=DATE},
      </if>
      <if test="record.firstName != null">
        first_name = #{record.firstName,jdbcType=VARCHAR},
      </if>
      <if test="record.lastName != null">
        last_name = #{record.lastName,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=CHAR},
      </if>
      <if test="record.hireDate != null">
        hire_date = #{record.hireDate,jdbcType=DATE},
      </if>
      <if test="record.timeStamp != null">
        time_stamp = #{record.timeStamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employees
    set emp_no = #{record.empNo,jdbcType=INTEGER},
      birth_date = #{record.birthDate,jdbcType=DATE},
      first_name = #{record.firstName,jdbcType=VARCHAR},
      last_name = #{record.lastName,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=CHAR},
      hire_date = #{record.hireDate,jdbcType=DATE},
      time_stamp = #{record.timeStamp,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xue.entity.model.Employees">
    update employees
    <set>
      <if test="birthDate != null">
        birth_date = #{birthDate,jdbcType=DATE},
      </if>
      <if test="firstName != null">
        first_name = #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="lastName != null">
        last_name = #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=CHAR},
      </if>
      <if test="hireDate != null">
        hire_date = #{hireDate,jdbcType=DATE},
      </if>
      <if test="timeStamp != null">
        time_stamp = #{timeStamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    where emp_no = #{empNo,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xue.entity.model.Employees">
    update employees
    set birth_date = #{birthDate,jdbcType=DATE},
      first_name = #{firstName,jdbcType=VARCHAR},
      last_name = #{lastName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=CHAR},
      hire_date = #{hireDate,jdbcType=DATE},
      time_stamp = #{timeStamp,jdbcType=TIMESTAMP}
    where emp_no = #{empNo,jdbcType=INTEGER}
  </update>
</mapper>